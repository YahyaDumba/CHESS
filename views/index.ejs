<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Online Chess Game</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
      .chessboard {
        display: grid;
        grid-template-columns: repeat(8, minmax(0, 1fr));
        grid-template-rows: repeat(8, minmax(0, 1fr));
        width: 400px;
        height: 400px;
        transform: rotate(0deg);
      }

      .piece.white {
        color: white;
        filter: drop-shadow(0 0 2px rgba(0, 0, 0, 1));
      }

      .piece.black {
        color: black;
      }

      .flipped {
        transform: rotate(180deg);
      }

      .square {
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .square.light {
        background-color: #f0d9b5;
      }

      .square.dark {
        background-color: #b58863;
      }

      .piece {
        font-size: 36px;
        cursor: pointer;
      }

      .flipped .piece {
        transform: rotate(180deg);
      }
    </style>
  </head>
  <body>
    <div class="w-full h-screen flex flex-col items-center justify-center bg-zinc-900 text-white gap-6">
      <h1 class="text-2xl font-bold">Multiplayer Chess Game</h1>
      <div id="turn" class="text-lg font-semibold">Loading turn...</div>
      <div class="chessboard w-96 h-96"></div>
    </div>

    <!-- Socket.IO -->
    <script src="https://cdn.socket.io/4.8.1/socket.io.min.js"></script>
    <!-- Chess.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chess.js/0.10.3/chess.min.js"></script>

    <!-- Game Logic -->
    <script>
      const socket = io();
      const chess = new Chess();
      const boardElement = document.querySelector(".chessboard");
      const turnElement = document.getElementById("turn");

      let draggedPiece = null;
      let sourceSquare = null;
      let playerRole = null;

      const renderBoard = () => {
        const board = chess.board();
        boardElement.innerHTML = "";

        board.forEach((row, rowIndex) => {
          row.forEach((square, colIndex) => {
            const squareElement = document.createElement("div");
            squareElement.classList.add(
              "square",
              (rowIndex + colIndex) % 2 === 0 ? "light" : "dark"
            );
            squareElement.dataset.row = rowIndex;
            squareElement.dataset.col = colIndex;

            if (square) {
              const pieceElement = document.createElement("div");
              pieceElement.classList.add(
                "piece",
                square.color === "w" ? "white" : "black"
              );
              pieceElement.innerText = getPieceUnicode(square);
              pieceElement.draggable = playerRole === square.color;

              pieceElement.addEventListener("dragstart", (e) => {
                if (pieceElement.draggable) {
                  draggedPiece = pieceElement;
                  sourceSquare = { row: rowIndex, col: colIndex };
                  e.dataTransfer.setData("text/plain", "");
                }
              });

              pieceElement.addEventListener("dragend", () => {
                draggedPiece = null;
                sourceSquare = null;
              });

              squareElement.appendChild(pieceElement);
            }

            squareElement.addEventListener("dragover", (e) => e.preventDefault());

            squareElement.addEventListener("drop", (e) => {
              e.preventDefault();
              if (draggedPiece) {
                const targetSquare = {
                  row: parseInt(squareElement.dataset.row),
                  col: parseInt(squareElement.dataset.col),
                };
                handleMove(sourceSquare, targetSquare);
              }
            });

            boardElement.appendChild(squareElement);
          });
        });

        if (playerRole === 'b') {
          boardElement.classList.add("flipped");
        } else {
          boardElement.classList.remove("flipped");
        }

        turnElement.innerText = `Turn: ${chess.turn() === 'w' ? 'White ♙' : 'Black ♟'}`;
      };

      const handleMove = (source, target) => {
        const move = {
          from: `${String.fromCharCode(97 + source.col)}${8 - source.row}`,
          to: `${String.fromCharCode(97 + target.col)}${8 - target.row}`,
          promotion: 'q',
        };

        // ✅ Only allow if it's your turn
        if ((playerRole === 'w' && chess.turn() === 'w') || 
            (playerRole === 'b' && chess.turn() === 'b')) {
          socket.emit("move", move);
        } else {
          alert("⏳ Wait for your turn!");
        }
      };

      const getPieceUnicode = (piece) => {
        const unicodePieces = {
          p: "♙", r: "♖", n: "♞", b: "♗", q: "♕", k: "♔",
          P: "♟", R: "♜", N: "♘", B: "♝", Q: "♛", K: "♚",
        };
        return unicodePieces[piece.type] || "";
      };

      socket.on("playerRole", (role) => {
        playerRole = role;
        renderBoard();
      });

      socket.on("spectatorRole", () => {
        playerRole = null;
        renderBoard();
      });

      socket.on("boardState", (fen) => {
        chess.load(fen);
        renderBoard();
      });

      socket.on("move", (move) => {
        chess.move(move);
        renderBoard();
      });

      renderBoard();
    </script>
  </body>
</html>
